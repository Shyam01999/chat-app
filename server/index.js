const express = require('express');
const app = express();
require('dotenv').config();
const cors = require('cors');
const PORT = process.env.PORT || 8080;

app.use(express.json());
app.use(cors({
    origin: "http://localhost:5173",
    method: ['GET', 'POST'],
    credentials: true
}))

const authRouter = require('./router/authRouter');
const AppError = require('./utils/appError');
const globalErrorHandler = require('./middleware/globalErrorHandler');
const projectRouter = require('./router/projectRouter');
const db = require("./models");

const { Server } = require("socket.io");
const { createServer } = require('node:http');
const userRoute = require('./router/user.routes');
const TryCatch = require('./utils/TryCatch');

const server = createServer(app);
const io = new Server(server, {
    cors: {
        origin: "http://localhost:5173",
        method: ['GET', 'POST'],
        credentials: true
    }
});


io.on('connection', (socket) => {
    console.log('a user connected');
    console.log(`user id ${socket.id}`);

    // socket.emit('welcome', `Welcome to the server ${socket.id}`);
    // socket.broadcast.emit('welcome', `${socket.id} joined the server.`); //to send other socket that are connected

    socket.on("message", ({ room, message }) => {
        console.log("message", message);
        console.log("room", room)
        io.to(room).emit('receive-message', message) //to send message to particular user.

        // io.emit('receive-message', data) //it will send message to all socket connected
        // socket.broadcast.emit('receive-message', data) //it will send message to all socket connected except the
    })


    socket.on('disconnect', () => {
        console.log(`User disconnected ${socket.id}`)
    })
})






//all routes will be here
app.use("/user", userRoute)
app.use('/api/v1/auth', authRouter);
app.use('/api/v1/project', projectRouter);

app.use('*',
    TryCatch(async (req, res, next) => {
        // provide custom error message generated by user
        throw new AppError(`Can't find ${req.originalUrl} on this server`, 404)

        // provide error message through global error handler by using catchAsync middleware way without using try catch block
        // throw new Error(`Can't find ${req.originalUrl} on this server`);

        // provide default error message  through global error handler for async function
        // return next(new Error(`Can't find ${req.originalUrl} on this server`))

        // provide error message through global error handler for normal function
        // throw new Error(`Can't find ${req.originalUrl} on this server`);

        // default way to provide error message 
        // res.status(404).json({
        //     status: 'fail',
        //     message: `Can't find ${req.originalUrl} on this server`
        // })
    }))

//global error handler
app.use(globalErrorHandler);

// server.listen(PORT, () => {
//     console.log(`Server is running on port ${PORT}`);
// });

db.sequelize
    .sync({ force: false })
    .then(() => {
        server.listen(PORT, () => {
            console.log(`Server is running on port ${PORT}`);
            console.log("Database connected successfully");
        })
    })
    .catch((err) => {
        console.error("Error syncing database:", err);
    });